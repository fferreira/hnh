-- Declarations

type Sin = Int
type List a = [a]

data Bool = True | False

data Stack a = Stack [a] | Empty ;

data Something = Cons Int ;

fun :: Int -> Int -> Int ;
fun = undefined

infixl 6 +, -
infixl 7 *, /
infixr 8 ^
infix 4 ==, <, >

-- Some test expressions (for the fixity)
one :: Int;
one = 2 + 3 * 4 + 5 ;
b = 4 == 5 + 3 ;
c = 2 ^ 3 ^ 4 ^ 5 ;

--- Function binding & pattern

fun' a b c = joker ;
fun2 Cons a = joker ;
fun3 a b = joker ;
fun4 a:xs = joker;
fun5 (a,b,c) = joker;
fun6 _ = joker;
(+) a b = joker;

--- Pattern Binding

c1 = joker ;
Cons a2 = joker ;
a3 b4 = joker ;
a5:xs = joker;
(a7,b8,c9) = joker;
_ = joker;
(.+.) = joker;

-- literal 

lit = 42;
lit1 = 1.6180339887;
lit2 = 100E100;
lit3 = 100E-100;
lit4 = "hola";
lit5 = 'a';
lit6 = "hola\nchau";

-- Expression

ga = b;
ha = Cons;
ia = 1 + 1;
ja = (+) 1 1;
ka = 2 * 2 + 3;
la = 2 + 2 * 3;
ma = (2 + 2) * 3;
na = 2 * (2 + 3); 
oa = f x;
pa = ~a;
qa = \a -> a;
ra = let b = 14; a = c in c b;
sa = if 1 == 1 then 1 else 0;
ta = case exp of { a -> a; Cons a -> b; };
ua = 1;
va = [1, 2, 4];

two :: (Int, Int, Int);
two = (1, 2, 4);
