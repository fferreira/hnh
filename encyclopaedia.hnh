-- Declarations

type Sin = Int
type List a = [a]

data Bool = True | False

data Stack a = Stack [a] | Empty ;

fun :: Int -> Int -> Int ;
fun = undefined

infixl 6 +, -
infixl 7 *, /
infixr 8 ^
infix 4 ==, <, >

-- Some test expressions (for the fixity)

a = 2 + 3 * 4 + 5 ;
b = 4 == 5 + 3 ;
c = 2 ^ 3 ^ 4 ^ 5 ;


--- Function binding & pattern

fun a b c = joker ;
fun Cons a = joker ;
fun a b = joker ;
fun [a, b, c] = joker;
fun a:xs = joker;
fun (a,b,c) = joker;
fun _ = joker;
(+) a b = joker;
f x | x = 1 | y = 2;

--- Pattern Binding

c = joker ;
Cons a = joker ;
a b = joker ;
[a, b, c] = joker;
a:xs = joker;
(a,b,c) = joker;
_ = joker;
(+) = joker;

-- literal 

lit = 42;
lit = 1.6180339887;
lit = 100E100;
lit = 100E-100;
lit = "hola";
lit = 'a';
lit = "hola\nchau";

-- Expression

a = b;
a = Cons;
a = 1 + 1;
a = (+) 1 1;
a = 2 * 2 + 3;
a = 2 + 2 * 3;
a = (2 + 2) * 3;
a = 2 * (2 + 3); 
a = f x;
a = ~a;
a = \a -> a;
a = let b = 14; a = c in c b;
a = if 1 == 1 then 1 else 0;
a = case exp of { a -> a; Cons a -> b; };
a = 1;
a = [1, 2, 4];
a = (1, 2, 4);
